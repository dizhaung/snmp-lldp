{"name":"SNMP-LLDP","tagline":"Build LLDP tree from SNMP information","body":"SNMP LLDP\r\n=========\r\n\r\nBuild LLDP tree from SNMP information\r\n\r\nPrerequisites\r\n-------------\r\n* Net-SNMP with python bindings\r\n* Be able to resolve device IP from name reported through LLDP\r\n* Same SNMP community configured on all devices\r\n\r\nLimitations\r\n-----------\r\n* **Currently this script only handles LLDP for HP ProCurve and Juniper JUNOS devices**\r\n* HP ProCurve firmware I.10.43 and perhaps the whole I-series seems to lack OIDs for model, firmware version, serial number.\r\n* Juniper JUNOS older than version 11 seems to lack LLDP OIDs\r\n* Script can only reach devices which report a resolvable hostname over LLDP and have the same SNMP community configured.\r\n* SNMP version 1 and 2 only\r\n* If a device is connected to another with several ports, only the first port gets registered in the tree.\r\n\r\nFuture features\r\n---------------\r\n* Network interface information\r\n* VLAN information\r\n\r\nlldp.py usage\r\n-------------\r\nRun the script with hostname of a SNMP and LLDP enabled device as argument. That device will become root of the generated lldp tree structure.\r\n<pre>\r\nusage: lldp.py [options] COMMAND HOST\r\n\r\npositional arguments:\r\n  COMMAND               list or tree (default: list)\r\n  HOST                  hostname or IP address\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -c COMMUNITY, --community COMMUNITY\r\n                        SNMP community (default: public)\r\n  -q, --quiet           Do not display or log errors\r\n  -l LOGFILE, --logfile LOGFILE\r\n                        Log file (Default is logging to STDERR)\r\n  -o OIDFILE, --oidfile OIDFILE\r\n                        JSON file containing SNMP OIDs (default: oid.json)\r\n\r\n</pre>\r\n\r\nIf COMMAND is list, the JSON output to STDOUT is a list of hostnames detected recursively through LLDP.\r\n<pre>\r\n[\r\n\t\"switch001.example.net\",\r\n\t\"switch008.example.net\",\r\n\t\"switch036.example.net\",\r\n\t# output truncated\r\n]\r\n</pre>\r\n\r\nIf COMMAND is tree, output is JSON tree structure in following format:\r\n<pre>\r\n{\r\n    \"id\": \"switch001.example.net\",\r\n    \"children\": [\r\n        {\r\n            \"id\": \"switch008.example.net\",\r\n            \"children\": [\r\n                {\r\n                    \"id\": \"switch036.example.net\"\r\n                },\r\n                {\r\n                    \"id\": \"switch005.example.net\"\r\n                },\r\n                {\r\n                    \"id\": \"switch001.example.net\",\r\n                    \"children\": [\r\n                        {\r\n                            \"id\": \"switch028.example.net\"\r\n                        },\r\n                        {\r\n                            \"id\": \"switch019.example.net\"\r\n                        },\r\n                        {\r\n                            \"id\": \"switch014.example.net\"\r\n                        },\r\n                        {\r\n                            \"id\": \"switch032.example.net\"\r\n                        },\r\n                        {\r\n                            \"id\": \"switch045.example.net\",\r\n                            \"children\": [\r\n                                {\r\n                                    \"id\": \"switch056.example.net\"\r\n                                }\r\n                            ]\r\n                        }\r\n\t\t\t# output truncated\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n</pre>\r\n\r\ngetinfo.py usage\r\n----------------\r\n\r\ngetinfo.py is designed to be run with lldp.py list output as input, either through stdin (pipe, for example) or by specifying a text file with the '-f' flag. Something like this:\r\n<pre>\r\nexport SNMPCOMMUNITY=secretcommunity\r\nlldp.py list switch001.example.net | getinfo.py > deviceinfo.json\r\n-or-\r\nlldp.py list switch001.example.net > list.json\r\ngetinfo.py -f list.json\r\n-or-\r\nlldp.py list switch001.example.net > list.json\r\ncat list.json | getinfo.py\r\n</pre>\r\n\r\nOther flags:\r\n<pre>\r\nusage: getinfo.py [-h] [-f INPUTFILE] [-c COMMUNITY] [-q] [-l LOGFILE]\r\n                  [-o OIDFILE]\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -f INPUTFILE, --inputfile INPUTFILE\r\n                        File to read list of devices from (defaults to reading\r\n                        from stdin)\r\n  -c COMMUNITY, --community COMMUNITY\r\n                        SNMP community (default: public)\r\n  -q, --quiet           Do not display or log errors\r\n  -l LOGFILE, --logfile LOGFILE\r\n                        Log file (Default is logging to STDERR)\r\n  -o OIDFILE, --oidfile OIDFILE\r\n                        JSON file containing SNMP OIDs (default: oid.json)\r\n</pre>\r\n\r\ngraph.py usage\r\n--------------\r\n\r\nPrerequisites:\r\n* pydot library\r\n\r\ngraph.py is designed to be run with getinfo.py output as input, either through stdin (pipe, for example) or by specifying a text file with the '-f' flag. A device has to be specified to put in the root of the graph. Something like this:\r\n<pre>\r\nexport SNMPCOMMUNITY=secretcommunity\r\nlldp.py list switch001.example.net | getinfo.py > deviceinfo.json\r\ncat deviceinfo.json | graph.py -o graph.png switch001.example.net\r\n</pre>\r\n\r\nOther flags:\r\n<pre>\r\nusage: graph.py [-h] [-i INFOFILE] [-o OUTFILE] [-l LOGFILE] [-q] [-v] ROOT\r\n\r\npositional arguments:\r\n  ROOT                  Device to put as root of the graph\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -i INFOFILE, --infofile INFOFILE\r\n                        File to read info about devices from (default:\r\n                        info.json, failing that: stdin)\r\n  -o OUTFILE, --outfile OUTFILE\r\n                        File to write to (default: graph.png)\r\n  -l LOGFILE, --logfile LOGFILE\r\n                        Log file (default is logging to STDERR)\r\n  -q, --quiet           Do not display or log errors\r\n  -v, --verbose         Increase verbosity when using logfile.\r\n</pre>\r\n\r\n\r\n\r\nLicense\r\n-------\r\nCopyright 2013 Stanislav Blokhin (github.com/stanislavb)\r\n\r\nThis file is part of snmp-lldp.\r\n\r\nsnmp-lldp is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\n\r\nsnmp-lldp is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License along with snmp-lldp.  If not, see <http://www.gnu.org/licenses/>.\r\n","google":"UA-1296558-2","note":"Don't delete this file! It's used internally to help with page regeneration."}